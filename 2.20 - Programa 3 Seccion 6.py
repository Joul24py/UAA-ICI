# -*- coding: utf-8 -*-
"""Seccion5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/198qbGGwQUohmnJfHMOliCUQ5RtgRvGBD
"""

import gym
import numpy as np
MAX_NUM_EPISODES = 50000
STEPS_PER_EPISODE = 200
EPSILON_MIN = 0.005
max_num_steps = MAX_NUM_EPISODES * STEPS_PER_EPISODE#el numero maximo de pasos que se pueden dar
EPSILON_DECAY = 500 * EPSILON_MIN/max_num_steps#disminucion de epsilon
ALPHA = 0.05
GAMMA = 0.98
NUM_DISCRETE_BINS = 30#numero de divisiones para discretizar la opciones
class QLearner(object):#clase Qlearner
  def __init__ (self, environment):
    self.obs_shape = environment.observation_space.shape#el observador de espacio de la forma
    self.obs_high = environment.observation_space.high#observador del valor superior
    self.obs_low = environment.observation_space.low#observador del valor inferior
    self.obs_bins = NUM_DISCRETE_BINS#discretizar de 30
    self.bin_width = (self.obs_high-self.obs_low)/self.obs_bins#anchura de la observacion
    
    self.action_shape = environment.action_space.n#forma de la accion
    self.Q = np.zeros((self.obs_bins+1, self.obs_bins+1, self.action_shape))#la matrices de acciones en zeros de 31*31*2
    self.alpha = ALPHA#el valor de alpha para evitar errores cuando se modifique ALPHA
    self.gamma = GAMMA# "                           "
    self.epsilon = 1.0#el valor base de epsilon sera de 1
    
  def discretize (self, obs):#funcion descretizar de la clase QLearner
    return tuple (((obs-self.obs_low)/self.bin_width).astype(int))#regresa una tupla del valor de obs-- el valor minimo de observacion entre 
    #la anchura de la observacion
   
  def get_action (self, obs): #metodo para obtener la accion
    discrete_obs = self.discretize( obs)#discrete_obs va a ser una tupla
    if self.epsilon > EPSILON_MIN:#si el valor de epsilon es mayor al valor de EPSILON_MIN
      self.epsilon -= EPSILON_DECAY#le resta al valor de epsilon del decreciente de epsilon
    if np.random.random() > self.epsilon: #el valor aleatorio el mayor a epsilon
      return np.argmax(self.Q[discrete_obs])#regresa el valor de np.argmax  osea una accion intelignete
    else:
      return np.random.choice([a for a in range (self.action_shape)])#eleccion aleatoria dentro de las posibles
    
    
  def learn (self, obs, action, reward, next_obs):
    discrete_obs = self.discretize(obs)#estado actual
    discrete_next_obs = self.discretize(next_obs)#estado siguiente
    self.Q[discrete_obs][action] += self.alpha*(reward + self.gamma * np.max(self.Q[discrete_next_obs]) - self.Q[discrete_obs][action] )
    #ecuacion de bellman para asignarle valores a los estados y a las posibles acciones que puede tomar
    
def train (agent, environment):#funcion para llamar los metodos del agente qlearner
  best_reward = -float('inf')
  for episode in range (MAX_NUM_EPISODES):
    done = False
    obs = environment.reset()
    total_reward = 0.0
    while not done:
      action = agent.get_action(obs)
      next_obs, reward, done, info = environment.step(action)
      agent.learn(obs, action, reward, next_obs)
      obs = next_obs
      total_reward += reward
    if total_reward > best_reward:
      best_reward = total_reward
    print("Episodio numero {} con recompensa: {}, mejor recompensa {}, epsilon: {} ".format(episode, total_reward, best_reward, agent.epsilon))
  return np.argmax(agent.Q, axis = 2)

def test (agent, environment, policy): #funcion para llamar los metodos del agente qlearner
  done = False
  obs = environment.reset()
  total_reward = 0.0
  while not done:
    action = agent.get_action(obs)
    next_obs, reward, done, info = environment.step(action)
    agent.learn(obs, action, reward, next_obs)
    obs = next_obs
    total_reward += reward
  return total_reward

if __name__ == "__main__":
  environment = gym.make("MountainCar-v0")
  agent = QLearner(environment)
  learned_policy = train(agent, environment)
  monitor_path = "./monitor_output"
  environment = gym.wrappers.Monitor(environment, monitor_path, force = True)
  for _ in range (1000):
    test(agent, environment, learned_policy)
  environment.close()